{
  parserClass="org.cutejs.lang.parser.CuteParser"
  parserUtilClass="org.cutejs.lang.parser.CuteParserUtil"

  elementTypeHolderClass="org.cutejs.lang.psi.CuteTypes"
  elementTypeClass="org.cutejs.lang.psi.CuteCompositeElementType"
  tokenTypeClass="org.cutejs.lang.psi.CuteTokenType"

  psiClassPrefix="Cute"
  psiImplClassSuffix="Impl"
  psiPackage="org.cutejs.lang.psi"
  psiImplPackage="org.cutejs.lang.psi.impl"

  consumeTokenMethod(".+_expr|expr")="consumeTokenFast"
  extends(".+expr")=expr

  tokens = [
    T_CLOSE = '}}'
    T_OPEN = '{{'
    T_OUTER_DATA = 'outer'
    T_IMPORT = '+'
    T_ESCAPE = '-'
    T_INTERPOLATE = '='
    T_TYPEDEF = '*'
    T_NAMESPACE = '$'
    T_EXPORT = '@'
    T_INLINE = '%'
    T_PARTIAL = '#'
    T_ARRAY_SPECIFIER = '[]'
    T_DOC_TYPE = 'type'
    T_COMMA = ','
    T_DOT = '.'
    T_IDENTIFIER = 'ident'
    T_THIS = 'this'
    T_EVAL = 'eval'
    T_EVAL_EXPRESSION = 'eval_expr'
  ]
}

JSTemplate ::= item_*

private item_ ::= 'outer'|statement|data

statement ::= '{{' expression? '}}'
expression ::= import|escape|interpolate|typedef|namespace|export|partial|inline|'eval'

import      ::= '+' 'eval' {pin(".*")=1}
escape      ::= '-' 'eval_expr' {pin(".*")=1}
interpolate ::= '=' 'eval_expr' {pin(".*")=1}
typedef     ::= '*' this_property 'type'
namespace   ::= '$' ref
export      ::= '@' export_args {pin(".*")=1}
partial     ::= '#' include_args {pin(".*")=1}
inline      ::= '%' include_args {pin(".*")=1}

include_args ::= ref ',' 'eval_expr' include_export? {pin(".*")=1}
include_export ::= ',' export_args {pin(".*")=1}
export_args ::= 'ident' '[]'?
this_property ::= 'this' [ '.' export_args ] {pin(".*")=1}

expr ::= member_ref_expr | identifier_ref_expr

fake ref_expr ::= expr? '.' 'ident'
identifier_ref_expr ::= 'ident' { extends=ref_expr elementType=ref_expr }
member_ref_expr ::= expr '.' 'ident' { extends=ref_expr elementType=ref_expr }
ref ::= expr {
    extends="org.cutejs.lang.psi.impl.CuteReferenceExprExt"
}

data ::= T_DATA+